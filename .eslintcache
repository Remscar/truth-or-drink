[{"E:\\truthordrink\\tod-react\\src\\index.tsx":"1","E:\\truthordrink\\tod-react\\src\\App.tsx":"2","E:\\truthordrink\\tod-react\\src\\GlobalProviders.tsx":"3","E:\\truthordrink\\tod-react\\src\\AppRouter.tsx":"4","E:\\truthordrink\\tod-react\\src\\hooks\\useGameState.tsx":"5","E:\\truthordrink\\tod-react\\src\\pages\\JoinGame.tsx":"6","E:\\truthordrink\\tod-react\\src\\pages\\NewGame.tsx":"7","E:\\truthordrink\\tod-react\\src\\pages\\GameRoom.tsx":"8","E:\\truthordrink\\tod-react\\src\\hooks\\useSocket.tsx":"9","E:\\truthordrink\\tod-react\\src\\hooks\\useGameStateHelpers.tsx":"10","E:\\truthordrink\\tod-react\\src\\pages\\index.ts":"11","E:\\truthordrink\\tod-react\\src\\util\\index.ts":"12","E:\\truthordrink\\tod-react\\src\\components\\useDataPlayerInput.tsx":"13","E:\\truthordrink\\tod-react\\src\\components\\button.tsx":"14","E:\\truthordrink\\tod-react\\src\\components\\useGameCodeInput.tsx":"15","E:\\truthordrink\\tod-react\\src\\pages\\Home.tsx":"16","E:\\truthordrink\\tod-react\\src\\util\\helpers.ts":"17","E:\\truthordrink\\tod-react\\src\\components\\game\\index.ts":"18","E:\\truthordrink\\tod-react\\src\\util\\types.ts":"19","E:\\truthordrink\\tod-react\\src\\util\\logger.ts":"20","E:\\truthordrink\\tod-react\\src\\shared\\index.ts":"21","E:\\truthordrink\\tod-react\\src\\components\\game\\main.tsx":"22","E:\\truthordrink\\tod-react\\src\\components\\game\\round.tsx":"23","E:\\truthordrink\\tod-react\\src\\components\\game\\lobby.tsx":"24","E:\\truthordrink\\tod-react\\src\\hooks\\useLeaveGame.tsx":"25","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\index.tsx":"26","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\scores.tsx":"27","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askerChoosing.tsx":"28","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\chooseWinner.tsx":"29","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\dealerChoosing.tsx":"30","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askingQuestions.tsx":"31","E:\\truthordrink\\tod-react\\src\\components\\usePlayerList.tsx":"32","E:\\truthordrink\\tod-react\\src\\pages\\HowToPlay.tsx":"33"},{"size":154,"mtime":1609462997507,"results":"34","hashOfConfig":"35"},{"size":714,"mtime":1609575627325,"results":"36","hashOfConfig":"35"},{"size":257,"mtime":1609150886587,"results":"37","hashOfConfig":"35"},{"size":1394,"mtime":1609577749641,"results":"38","hashOfConfig":"35"},{"size":6593,"mtime":1609464548867,"results":"39","hashOfConfig":"35"},{"size":2778,"mtime":1609579241945,"results":"40","hashOfConfig":"35"},{"size":4005,"mtime":1609579184551,"results":"41","hashOfConfig":"35"},{"size":449,"mtime":1609466279756,"results":"42","hashOfConfig":"35"},{"size":421,"mtime":1609225265763,"results":"43","hashOfConfig":"35"},{"size":1277,"mtime":1609464653911,"results":"44","hashOfConfig":"35"},{"size":25,"mtime":1609138571442,"results":"45","hashOfConfig":"35"},{"size":79,"mtime":1609293355855,"results":"46","hashOfConfig":"35"},{"size":1739,"mtime":1609329947960,"results":"47","hashOfConfig":"35"},{"size":2864,"mtime":1609575692266,"results":"48","hashOfConfig":"35"},{"size":1635,"mtime":1609329944257,"results":"49","hashOfConfig":"35"},{"size":1619,"mtime":1609577704473,"results":"50","hashOfConfig":"35"},{"size":146,"mtime":1609293408084,"results":"51","hashOfConfig":"35"},{"size":25,"mtime":1609222582149,"results":"52","hashOfConfig":"35"},{"size":208,"mtime":1609212950372,"results":"53","hashOfConfig":"35"},{"size":176,"mtime":1609149661556,"results":"54","hashOfConfig":"35"},{"size":2114,"mtime":1609574103156,"results":"55","hashOfConfig":"35"},{"size":560,"mtime":1609222645986,"results":"56","hashOfConfig":"35"},{"size":2246,"mtime":1609466072355,"results":"57","hashOfConfig":"35"},{"size":2800,"mtime":1609575421730,"results":"58","hashOfConfig":"35"},{"size":463,"mtime":1609297333774,"results":"59","hashOfConfig":"35"},{"size":163,"mtime":1609312238527,"results":"60","hashOfConfig":"35"},{"size":3217,"mtime":1609570655195,"results":"61","hashOfConfig":"35"},{"size":4400,"mtime":1609464915077,"results":"62","hashOfConfig":"35"},{"size":9553,"mtime":1609578901387,"results":"63","hashOfConfig":"35"},{"size":4286,"mtime":1609328027563,"results":"64","hashOfConfig":"35"},{"size":5574,"mtime":1609576523502,"results":"65","hashOfConfig":"35"},{"size":4760,"mtime":1609327734932,"results":"66","hashOfConfig":"35"},{"size":2317,"mtime":1609579020659,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1vozhqq",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\truthordrink\\tod-react\\src\\index.tsx",[],["139","140"],"E:\\truthordrink\\tod-react\\src\\App.tsx",[],"E:\\truthordrink\\tod-react\\src\\GlobalProviders.tsx",[],"E:\\truthordrink\\tod-react\\src\\AppRouter.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useGameState.tsx",["141"],"import React from \"react\";\r\nimport { CouldError, getLogger, Maybe } from \"../util\";\r\n\r\nimport {\r\n  ChoseQuestionDto,\r\n  CompleteGameStateDto,\r\n  CreatedDto,\r\n  CreateDto,\r\n  JoinDto,\r\n  JoinedDto,\r\n  LeaveGameDto,\r\n  PlayerAnsweredDto,\r\n  PlayerAnswerLikedDto,\r\n  PlayerChoseWinnerDto,\r\n  PlayerInfo,\r\n  PlayerStartNextRound,\r\n  SelectedPlayersDto,\r\n  ToDGameState,\r\n} from \"../shared\";\r\nimport { useSocket } from \"./useSocket\";\r\n\r\nexport * from \"./useGameStateHelpers\";\r\n\r\nconst logger = getLogger(\"hooks:useGameState\");\r\n\r\nexport interface GameState extends ToDGameState {\r\n  isOwner: boolean;\r\n}\r\n\r\nexport interface GameStateContext {\r\n  currentGame: Maybe<GameState>;\r\n  playerInfo: Maybe<PlayerInfo>;\r\n  createGame: (player: PlayerInfo, decks: string[]) => Promise<string>;\r\n  joinGame: (\r\n    player: PlayerInfo,\r\n    gameCode: string\r\n  ) => Promise<CouldError<boolean>>;\r\n  leaveGame: () => Promise<void>;\r\n  startGame: () => void;\r\n  choosePlayers: (players: PlayerInfo[]) => Promise<void>;\r\n  choseQuestion: (index: number) => Promise<void>;\r\n  playerAnsweredQuestion: (didAnswer: boolean, player: PlayerInfo) => Promise<void>;\r\n  choseWinner: (winner: PlayerInfo) => Promise<void>;\r\n  startNewRound: () => Promise<void>;\r\n  likeAnswer: (player: PlayerInfo) => Promise<void>;\r\n}\r\n\r\nconst gameStateContext = React.createContext<Maybe<GameStateContext>>(null);\r\n\r\nexport const useGameState = () => {\r\n  const context = React.useContext(gameStateContext);\r\n  if (!context) {\r\n    throw Error(\"Game State Not ready\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const useCurrentGameState = () => {\r\n  const context = React.useContext(gameStateContext);\r\n  if (!context || !context.currentGame) {\r\n    throw Error(\"Game Session Not ready\");\r\n  }\r\n  return context.currentGame;\r\n};\r\n\r\nexport const useRawGameState = () => {\r\n  const context = React.useContext(gameStateContext);\r\n  return context;\r\n};\r\n\r\nexport const GameStateContextProvider: React.FC = (props) => {\r\n  const gameSocket = useSocket();\r\n  const [currentGameState, setCurrentGameState] = React.useState<Maybe<GameState>>(null);\r\n  const [playerInfo, setPlayerInfo] = React.useState<Maybe<PlayerInfo>>(null);\r\n\r\n  const updateGameState = (data: ToDGameState) => {\r\n    setCurrentGameState({\r\n      ...data,\r\n      isOwner: data.owner === gameSocket.id,\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    gameSocket.on(\"connect\", () => {\r\n      logger.debug(\"client connected\");\r\n    });\r\n  \r\n    gameSocket.on(\"completeGameState\", (data: CompleteGameStateDto) => {\r\n  \r\n      logger.log(`Received full state for ${data.gameCode}`);\r\n      logger.debug(data);\r\n  \r\n      if (currentGameState && data.gameCode !== currentGameState.gameCode) {\r\n        logger.warn(\r\n          `Received a game state for a game we aren't in? ${currentGameState.gameCode} vs received ${data.gameCode}`\r\n        );\r\n      }\r\n  \r\n      updateGameState(data);\r\n    });\r\n  }, [])\r\n\r\n  \r\n\r\n  const getSocket = async () => {\r\n    return gameSocket;\r\n  };\r\n\r\n  const joinGame = async (player: PlayerInfo, gameCode: string) => {\r\n    const socket = await getSocket();\r\n    const dto: JoinDto = {\r\n      player,\r\n      gameCode,\r\n    };\r\n\r\n    socket.emit(\"join\", dto);\r\n\r\n    return new Promise<CouldError<boolean>>((resolve) => {\r\n      socket.once(\"joined\", (data: JoinedDto) => {\r\n        logger.log(\r\n          `Was ${data.success ? null : \"not\"} successful joining ${gameCode}`\r\n        );\r\n\r\n        if (data.success && data.state) {\r\n          setPlayerInfo(player);\r\n          updateGameState(data.state);\r\n        }\r\n\r\n        resolve({\r\n          value: data.success,\r\n          error: data.error,\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  const createGame = async (player: PlayerInfo, decks: string[]) => {\r\n    logger.log(`Creating game for ${player.name}`);\r\n\r\n    const socket = await getSocket();\r\n    const dto: CreateDto = {\r\n      creator: player,\r\n      decks\r\n    };\r\n    socket.emit(\"create\", dto);\r\n\r\n    return new Promise<string>((resolve) => {\r\n      socket.once(\"created\", (data: CreatedDto) => {\r\n        logger.log(`Server created our game with code: ${data.gameCode}`);\r\n        setPlayerInfo(player);\r\n        updateGameState(data);\r\n\r\n        resolve(data.gameCode);\r\n      });\r\n    });\r\n  };\r\n\r\n  const leaveGame = async () => {\r\n    if (!currentGameState || !playerInfo) {\r\n      return;\r\n    }\r\n    \r\n    const socket = await getSocket();\r\n    socket.emit('leaveGame', {} as LeaveGameDto);\r\n\r\n    setPlayerInfo(null);\r\n    setCurrentGameState(null);\r\n  }\r\n\r\n  const startGame = async () => {\r\n    if (!currentGameState || !playerInfo) {\r\n      return;\r\n    }\r\n\r\n    const socket = await getSocket();\r\n    socket.emit('startGame');\r\n  }\r\n\r\n  const choosePlayers = async (players: PlayerInfo[]) => {\r\n    const socket = await getSocket();\r\n\r\n    const dto: SelectedPlayersDto = {\r\n      players\r\n    }\r\n    socket.emit('selectedPlayers', dto);\r\n  }\r\n\r\n  const choseQuestion = async (index: number) => {\r\n    const socket = await getSocket();\r\n\r\n    const dto: ChoseQuestionDto = {\r\n      index\r\n    }\r\n    socket.emit('choseQuestion', dto);\r\n  }\r\n\r\n  const playerAnsweredQuestion = async (didAnswer: boolean, player: PlayerInfo) => {\r\n    const socket = await getSocket();\r\n\r\n    const dto: PlayerAnsweredDto = {\r\n      didAnswer,\r\n      player\r\n    }\r\n    socket.emit(\"playerAnswered\", dto);\r\n  }\r\n\r\n  const choseWinner = async (winner: PlayerInfo) => {\r\n    const socket = await getSocket();\r\n\r\n    const dto: PlayerChoseWinnerDto = {\r\n      winner\r\n    }\r\n    socket.emit('playerChoseWinner', dto);\r\n  }\r\n\r\n  const startNewRound = async () => {\r\n    const socket = await getSocket();\r\n\r\n    const dto: PlayerStartNextRound = {\r\n    }\r\n    socket.emit('playerStartNextRound', dto);\r\n  }\r\n\r\n  const likeAnswer = async (player: PlayerInfo) => {\r\n    const socket = await getSocket();\r\n\r\n    const dto: PlayerAnswerLikedDto = {\r\n      player\r\n    }\r\n    socket.emit('playerAnswerLiked', dto);\r\n  }\r\n\r\n  \r\n  const memoValue = React.useMemo(\r\n    () => ({\r\n      currentGame: currentGameState,\r\n      playerInfo: playerInfo,\r\n      joinGame,\r\n      createGame,\r\n      leaveGame,\r\n      startGame,\r\n      choosePlayers,\r\n      choseQuestion,\r\n      playerAnsweredQuestion,\r\n      choseWinner,\r\n      startNewRound,\r\n      likeAnswer\r\n    }),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [currentGameState]\r\n  );\r\n\r\n  let contextValue: Maybe<GameStateContext> = memoValue;\r\n\r\n\r\n  return (\r\n    <gameStateContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </gameStateContext.Provider>\r\n  );\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\pages\\JoinGame.tsx",["142"],"E:\\truthordrink\\tod-react\\src\\pages\\NewGame.tsx",[],"E:\\truthordrink\\tod-react\\src\\pages\\GameRoom.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useSocket.tsx",["143"],"import React from \"react\";\r\n\r\nimport openSocket from \"socket.io-client\";\r\n\r\nexport const useSocket = () => {\r\n  const host = window.location.origin;\r\n  const socket = React.useMemo(() => {\r\n    const gameSocket = openSocket(host, { path: \"/socket\" });\r\n\r\n    gameSocket.on(\"error\", (e) => {\r\n      console.log(\"socket error\");\r\n      console.log(e);\r\n    });\r\n\r\n    return gameSocket;\r\n  }, []);\r\n\r\n  return socket;\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\hooks\\useGameStateHelpers.tsx",[],"E:\\truthordrink\\tod-react\\src\\pages\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\util\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\useDataPlayerInput.tsx",["144"],"import { Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { PlayerInfo } from \"../shared\";\r\n\r\nexport interface PlayerInput {\r\n  isValid: boolean;\r\n  component: React.ReactFragment;\r\n  name: string;\r\n  playerInfo: PlayerInfo;\r\n}\r\n\r\nconst maxNameLength = 32;\r\n\r\nexport const useDataPlayerInput = (): PlayerInput => {\r\n  const [nameError, setNameError] = React.useState(false);\r\n  const [name, setName] = React.useState(\"\");\r\n  const [nameHelperText, setNameHelperText] = React.useState(\"\");\r\n\r\n  const onNameChanged = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    const newValue = event.target.value;\r\n\r\n    if (newValue.length > maxNameLength) {\r\n      setNameError(true);\r\n      setNameHelperText(`Must be less than ${maxNameLength} letters long.`);\r\n    } else {\r\n      setNameError(false);\r\n      setNameHelperText(``);\r\n    }\r\n    setName(newValue);\r\n  };\r\n\r\n  const playerInputComponent = (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"stretch\" justify=\"center\">\r\n        <Grid item>\r\n          <TextField\r\n            value={name}\r\n            label=\"Your Name\"\r\n            id=\"playername\"\r\n            error={nameError}\r\n            onChange={onNameChanged}\r\n            helperText={nameHelperText}\r\n            fullWidth\r\n            autoComplete={'off'}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const dataMemo = React.useMemo(() => {\r\n    return {\r\n      isValid: !nameError && name.length > 0,\r\n      component: playerInputComponent,\r\n      name,\r\n      playerInfo: {\r\n        name\r\n      } as PlayerInfo\r\n    }\r\n  }, [nameError, name, playerInputComponent]);\r\n\r\n  return dataMemo;\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\components\\button.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\useGameCodeInput.tsx",["145"],"import { Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport interface GameCodeInput {\r\n  isValid: boolean;\r\n  component: React.ReactFragment;\r\n  code: string;\r\n}\r\n\r\nconst maxCodeLength = 8;\r\n\r\nexport const useGameCodeInput = (): GameCodeInput => {\r\n  const [codeError, setCodeError] = React.useState(false);\r\n  const [code, setCode] = React.useState(\"\");\r\n  const [codeHelperText, setCodeHelperText] = React.useState(\"\");\r\n\r\n  const onCodeChanged = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    const newValue = event.target.value.toUpperCase();\r\n\r\n    if (newValue.length > maxCodeLength) {\r\n      setCodeError(true);\r\n      setCodeHelperText(`Must be less than ${maxCodeLength} characters long.`);\r\n    } else {\r\n      setCodeError(false);\r\n      setCodeHelperText(``);\r\n    }\r\n    setCode(newValue);\r\n  };\r\n\r\n  const gameCodeInputComponent = (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"stretch\" justify=\"center\">\r\n        <Grid item>\r\n          <TextField\r\n            value={code}\r\n            label=\"Game Code\"\r\n            id=\"gamecode\"\r\n            error={codeError}\r\n            onChange={onCodeChanged}\r\n            helperText={codeHelperText}\r\n            fullWidth\r\n            autoComplete={'off'}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const dataMemo = React.useMemo(() => {\r\n    return {\r\n      isValid: !codeError && code.length > 0,\r\n      component: gameCodeInputComponent,\r\n      code,\r\n    }\r\n  }, [codeError, code, gameCodeInputComponent]);\r\n\r\n  return dataMemo;\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\pages\\Home.tsx",[],"E:\\truthordrink\\tod-react\\src\\util\\helpers.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\util\\types.ts",[],"E:\\truthordrink\\tod-react\\src\\util\\logger.ts",[],"E:\\truthordrink\\tod-react\\src\\shared\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\main.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\round.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\lobby.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useLeaveGame.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\index.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\scores.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askerChoosing.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\chooseWinner.tsx",["146"],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\dealerChoosing.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askingQuestions.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\usePlayerList.tsx",[],"E:\\truthordrink\\tod-react\\src\\pages\\HowToPlay.tsx",[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":101,"column":6,"nodeType":"153","endLine":101,"endColumn":8,"suggestions":"154"},{"ruleId":"151","severity":1,"message":"155","line":27,"column":6,"nodeType":"153","endLine":27,"endColumn":23,"suggestions":"156"},{"ruleId":"151","severity":1,"message":"157","line":16,"column":6,"nodeType":"153","endLine":16,"endColumn":8,"suggestions":"158"},{"ruleId":"151","severity":1,"message":"159","line":34,"column":9,"nodeType":"160","endLine":51,"endColumn":4},{"ruleId":"151","severity":1,"message":"161","line":32,"column":9,"nodeType":"160","endLine":49,"endColumn":4},{"ruleId":"151","severity":1,"message":"162","line":39,"column":6,"nodeType":"153","endLine":39,"endColumn":8,"suggestions":"163"},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'currentGameState', 'gameSocket', and 'updateGameState'. Either include them or remove the dependency array.","ArrayExpression",["166"],"React Hook React.useEffect has a missing dependency: 'gameCodeInput.code.length'. Either include it or remove the dependency array.",["167"],"React Hook React.useMemo has a missing dependency: 'host'. Either include it or remove the dependency array.",["168"],"The 'playerInputComponent' JSX element makes the dependencies of useMemo Hook (at line 62) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'playerInputComponent' in its own useMemo() Hook.","VariableDeclarator","The 'gameCodeInputComponent' JSX element makes the dependencies of useMemo Hook (at line 57) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'gameCodeInputComponent' in its own useMemo() Hook.","React Hook React.useEffect has a missing dependency: 'currentGame.timerEnd'. Either include it or remove the dependency array.",["169"],"no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [currentGameState, gameSocket, updateGameState]",{"range":"178","text":"179"},"Update the dependencies array to be: [gameCodeInput.code.length, playerDataInput]",{"range":"180","text":"181"},"Update the dependencies array to be: [host]",{"range":"182","text":"183"},"Update the dependencies array to be: [currentGame.timerEnd]",{"range":"184","text":"185"},[2911,2913],"[currentGameState, gameSocket, updateGameState]",[1148,1165],"[gameCodeInput.code.length, playerDataInput]",[391,393],"[host]",[1384,1386],"[currentGame.timerEnd]"]