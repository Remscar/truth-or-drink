[{"E:\\truthordrink\\tod-react\\src\\index.tsx":"1","E:\\truthordrink\\tod-react\\src\\App.tsx":"2","E:\\truthordrink\\tod-react\\src\\GlobalProviders.tsx":"3","E:\\truthordrink\\tod-react\\src\\AppRouter.tsx":"4","E:\\truthordrink\\tod-react\\src\\hooks\\useGameState.tsx":"5","E:\\truthordrink\\tod-react\\src\\pages\\JoinGame.tsx":"6","E:\\truthordrink\\tod-react\\src\\pages\\NewGame.tsx":"7","E:\\truthordrink\\tod-react\\src\\pages\\GameRoom.tsx":"8","E:\\truthordrink\\tod-react\\src\\hooks\\useSocket.tsx":"9","E:\\truthordrink\\tod-react\\src\\hooks\\useGameStateHelpers.tsx":"10","E:\\truthordrink\\tod-react\\src\\pages\\index.ts":"11","E:\\truthordrink\\tod-react\\src\\util\\index.ts":"12","E:\\truthordrink\\tod-react\\src\\components\\useDataPlayerInput.tsx":"13","E:\\truthordrink\\tod-react\\src\\components\\button.tsx":"14","E:\\truthordrink\\tod-react\\src\\components\\useGameCodeInput.tsx":"15","E:\\truthordrink\\tod-react\\src\\pages\\Home.tsx":"16","E:\\truthordrink\\tod-react\\src\\util\\helpers.ts":"17","E:\\truthordrink\\tod-react\\src\\components\\game\\index.ts":"18","E:\\truthordrink\\tod-react\\src\\util\\types.ts":"19","E:\\truthordrink\\tod-react\\src\\util\\logger.ts":"20","E:\\truthordrink\\tod-react\\src\\shared\\index.ts":"21","E:\\truthordrink\\tod-react\\src\\components\\game\\main.tsx":"22","E:\\truthordrink\\tod-react\\src\\components\\game\\round.tsx":"23","E:\\truthordrink\\tod-react\\src\\components\\game\\lobby.tsx":"24","E:\\truthordrink\\tod-react\\src\\hooks\\useLeaveGame.tsx":"25","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\index.tsx":"26","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\scores.tsx":"27","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askerChoosing.tsx":"28","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\chooseWinner.tsx":"29","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\dealerChoosing.tsx":"30","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askingQuestions.tsx":"31","E:\\truthordrink\\tod-react\\src\\components\\usePlayerList.tsx":"32","E:\\truthordrink\\tod-react\\src\\pages\\HowToPlay.tsx":"33","E:\\truthordrink\\tod-react\\src\\hooks\\useDuoGameState.tsx":"34","E:\\truthordrink\\tod-react\\src\\pages\\DuoGameRoom.tsx":"35","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\duoMain.tsx":"36","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\duoRound.tsx":"37","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\duoLobby.tsx":"38","E:\\truthordrink\\tod-react\\src\\hooks\\useGameSocket.tsx":"39","E:\\truthordrink\\tod-react\\src\\hooks\\useDuoGameStateHelpers.tsx":"40","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\index.ts":"41","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\askerChoosing.tsx":"42","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\choosePoints.tsx":"43","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\askingQuestions.tsx":"44","E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\scores.tsx":"45"},{"size":154,"mtime":1609462997507,"results":"46","hashOfConfig":"47"},{"size":769,"mtime":1609579750363,"results":"48","hashOfConfig":"47"},{"size":534,"mtime":1610074280867,"results":"49","hashOfConfig":"47"},{"size":1519,"mtime":1609909662589,"results":"50","hashOfConfig":"47"},{"size":7188,"mtime":1610086346305,"results":"51","hashOfConfig":"47"},{"size":3389,"mtime":1610079720162,"results":"52","hashOfConfig":"47"},{"size":4986,"mtime":1610086498881,"results":"53","hashOfConfig":"47"},{"size":449,"mtime":1609466279756,"results":"54","hashOfConfig":"47"},{"size":1268,"mtime":1610074395742,"results":"55","hashOfConfig":"47"},{"size":1277,"mtime":1609464653911,"results":"56","hashOfConfig":"47"},{"size":25,"mtime":1609138571442,"results":"57","hashOfConfig":"47"},{"size":79,"mtime":1609293355855,"results":"58","hashOfConfig":"47"},{"size":1739,"mtime":1609329947960,"results":"59","hashOfConfig":"47"},{"size":2864,"mtime":1609575692266,"results":"60","hashOfConfig":"47"},{"size":1635,"mtime":1609329944257,"results":"61","hashOfConfig":"47"},{"size":1619,"mtime":1609577704473,"results":"62","hashOfConfig":"47"},{"size":146,"mtime":1609293408084,"results":"63","hashOfConfig":"47"},{"size":25,"mtime":1609222582149,"results":"64","hashOfConfig":"47"},{"size":208,"mtime":1609212950372,"results":"65","hashOfConfig":"47"},{"size":176,"mtime":1609149661556,"results":"66","hashOfConfig":"47"},{"size":3135,"mtime":1610081384556,"results":"67","hashOfConfig":"47"},{"size":560,"mtime":1609909445281,"results":"68","hashOfConfig":"47"},{"size":2246,"mtime":1609466072355,"results":"69","hashOfConfig":"47"},{"size":2800,"mtime":1609575421730,"results":"70","hashOfConfig":"47"},{"size":463,"mtime":1609297333774,"results":"71","hashOfConfig":"47"},{"size":163,"mtime":1609312238527,"results":"72","hashOfConfig":"47"},{"size":3217,"mtime":1609570655195,"results":"73","hashOfConfig":"47"},{"size":4400,"mtime":1609464915077,"results":"74","hashOfConfig":"47"},{"size":10589,"mtime":1609907241967,"results":"75","hashOfConfig":"47"},{"size":4286,"mtime":1609328027563,"results":"76","hashOfConfig":"47"},{"size":5574,"mtime":1609576523502,"results":"77","hashOfConfig":"47"},{"size":4760,"mtime":1609327734932,"results":"78","hashOfConfig":"47"},{"size":2340,"mtime":1609579920550,"results":"79","hashOfConfig":"47"},{"size":6273,"mtime":1610086413720,"results":"80","hashOfConfig":"47"},{"size":489,"mtime":1610078486865,"results":"81","hashOfConfig":"47"},{"size":593,"mtime":1609912109700,"results":"82","hashOfConfig":"47"},{"size":2193,"mtime":1610082790829,"results":"83","hashOfConfig":"47"},{"size":2845,"mtime":1610078617625,"results":"84","hashOfConfig":"47"},{"size":711,"mtime":1610074250109,"results":"85","hashOfConfig":"47"},{"size":1301,"mtime":1609909083182,"results":"86","hashOfConfig":"47"},{"size":130,"mtime":1610082749561,"results":"87","hashOfConfig":"47"},{"size":4465,"mtime":1610086355299,"results":"88","hashOfConfig":"47"},{"size":4817,"mtime":1610087170210,"results":"89","hashOfConfig":"47"},{"size":4581,"mtime":1610086362741,"results":"90","hashOfConfig":"47"},{"size":3204,"mtime":1610083096936,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1vozhqq",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\truthordrink\\tod-react\\src\\index.tsx",[],["186","187"],"E:\\truthordrink\\tod-react\\src\\App.tsx",[],"E:\\truthordrink\\tod-react\\src\\GlobalProviders.tsx",[],"E:\\truthordrink\\tod-react\\src\\AppRouter.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useGameState.tsx",["188"],"E:\\truthordrink\\tod-react\\src\\pages\\JoinGame.tsx",["189"],"E:\\truthordrink\\tod-react\\src\\pages\\NewGame.tsx",[],"E:\\truthordrink\\tod-react\\src\\pages\\GameRoom.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useSocket.tsx",["190","191","192"],"E:\\truthordrink\\tod-react\\src\\hooks\\useGameStateHelpers.tsx",[],"E:\\truthordrink\\tod-react\\src\\pages\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\util\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\useDataPlayerInput.tsx",["193"],"import { Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { PlayerInfo } from \"../shared\";\r\n\r\nexport interface PlayerInput {\r\n  isValid: boolean;\r\n  component: React.ReactFragment;\r\n  name: string;\r\n  playerInfo: PlayerInfo;\r\n}\r\n\r\nconst maxNameLength = 32;\r\n\r\nexport const useDataPlayerInput = (): PlayerInput => {\r\n  const [nameError, setNameError] = React.useState(false);\r\n  const [name, setName] = React.useState(\"\");\r\n  const [nameHelperText, setNameHelperText] = React.useState(\"\");\r\n\r\n  const onNameChanged = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    const newValue = event.target.value;\r\n\r\n    if (newValue.length > maxNameLength) {\r\n      setNameError(true);\r\n      setNameHelperText(`Must be less than ${maxNameLength} letters long.`);\r\n    } else {\r\n      setNameError(false);\r\n      setNameHelperText(``);\r\n    }\r\n    setName(newValue);\r\n  };\r\n\r\n  const playerInputComponent = (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"stretch\" justify=\"center\">\r\n        <Grid item>\r\n          <TextField\r\n            value={name}\r\n            label=\"Your Name\"\r\n            id=\"playername\"\r\n            error={nameError}\r\n            onChange={onNameChanged}\r\n            helperText={nameHelperText}\r\n            fullWidth\r\n            autoComplete={'off'}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const dataMemo = React.useMemo(() => {\r\n    return {\r\n      isValid: !nameError && name.length > 0,\r\n      component: playerInputComponent,\r\n      name,\r\n      playerInfo: {\r\n        name\r\n      } as PlayerInfo\r\n    }\r\n  }, [nameError, name, playerInputComponent]);\r\n\r\n  return dataMemo;\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\components\\button.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\useGameCodeInput.tsx",["194"],"import { Grid, TextField } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport interface GameCodeInput {\r\n  isValid: boolean;\r\n  component: React.ReactFragment;\r\n  code: string;\r\n}\r\n\r\nconst maxCodeLength = 8;\r\n\r\nexport const useGameCodeInput = (): GameCodeInput => {\r\n  const [codeError, setCodeError] = React.useState(false);\r\n  const [code, setCode] = React.useState(\"\");\r\n  const [codeHelperText, setCodeHelperText] = React.useState(\"\");\r\n\r\n  const onCodeChanged = (\r\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\r\n  ) => {\r\n    const newValue = event.target.value.toUpperCase();\r\n\r\n    if (newValue.length > maxCodeLength) {\r\n      setCodeError(true);\r\n      setCodeHelperText(`Must be less than ${maxCodeLength} characters long.`);\r\n    } else {\r\n      setCodeError(false);\r\n      setCodeHelperText(``);\r\n    }\r\n    setCode(newValue);\r\n  };\r\n\r\n  const gameCodeInputComponent = (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\" alignItems=\"stretch\" justify=\"center\">\r\n        <Grid item>\r\n          <TextField\r\n            value={code}\r\n            label=\"Game Code\"\r\n            id=\"gamecode\"\r\n            error={codeError}\r\n            onChange={onCodeChanged}\r\n            helperText={codeHelperText}\r\n            fullWidth\r\n            autoComplete={'off'}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const dataMemo = React.useMemo(() => {\r\n    return {\r\n      isValid: !codeError && code.length > 0,\r\n      component: gameCodeInputComponent,\r\n      code,\r\n    }\r\n  }, [codeError, code, gameCodeInputComponent]);\r\n\r\n  return dataMemo;\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\pages\\Home.tsx",[],"E:\\truthordrink\\tod-react\\src\\util\\helpers.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\util\\types.ts",[],"E:\\truthordrink\\tod-react\\src\\util\\logger.ts",[],"E:\\truthordrink\\tod-react\\src\\shared\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\main.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\round.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\lobby.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useLeaveGame.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\index.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\scores.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askerChoosing.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\chooseWinner.tsx",["195"],"import React from \"react\";\r\nimport { useCurrentGameState, useGameState } from \"../../../hooks/useGameState\";\r\nimport { PlayerInfo } from \"../../../shared\";\r\nimport { Maybe } from \"../../../util\";\r\nimport { Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { StyledButton } from \"../../button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    paddingBottom: \"32px\",\r\n  },\r\n  choiceButton: {\r\n    paddingTop: \"32px\",\r\n  },\r\n}));\r\n\r\nexport const ChooseWinner: React.FC = (props) => {\r\n  const classes = useStyles();\r\n  const gameState = useGameState();\r\n  const currentGame = useCurrentGameState();\r\n  const localPlayer = gameState.playerInfo;\r\n  const round = currentGame.currentRound;\r\n  const involvedPlayers = currentGame.currentRound?.players;\r\n  const dealer = currentGame.dealer;\r\n  const alreadyLikedList = currentGame.currentRound?.likedAnswers;\r\n\r\n  const [hasLikedPlayers, setHasLikedPlayers] = React.useState<number[]>([]);\r\n  const [timeLeft, setTimeLeft] = React.useState<number>(15);\r\n  const [hasVotedForWinner, setHasVotedForWinner] = React.useState(false);\r\n\r\n  const [intervalId, setIntervalId] = React.useState<any>(undefined);\r\n  const [timerSet, setTimerSet] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    if (intervalId) {\r\n      clearInterval(intervalId);\r\n    }\r\n\r\n    let isSubscribed = true;\r\n\r\n    const interval = setInterval(() => {\r\n      const now = Date.now();\r\n      const timeLeft = Math.max(\r\n        Math.ceil((currentGame.timerEnd - now) / 1000),\r\n        0\r\n      );\r\n\r\n      if (!isSubscribed) {\r\n        return;\r\n      }\r\n\r\n      if (timeLeft > 0) {\r\n        setTimerSet(true);\r\n      }\r\n      setTimeLeft(timeLeft);\r\n    }, 500);\r\n\r\n    setIntervalId(interval);\r\n\r\n    return () => {\r\n      isSubscribed = false;\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n    }\r\n  }, [currentGame.timerEnd]);\r\n\r\n  if (!currentGame || !localPlayer || !round || !involvedPlayers || !dealer) {\r\n    return <div>Broken choose winner</div>;\r\n  }\r\n\r\n  let playersWeHaveLiked: string[] | undefined;\r\n  if (alreadyLikedList) {\r\n    playersWeHaveLiked = alreadyLikedList[localPlayer.name];\r\n  }\r\n\r\n  const choseWinner = async (winner: PlayerInfo) => {\r\n    setHasVotedForWinner(true);\r\n    await gameState.choseWinner(winner);\r\n  };\r\n\r\n  const likePlayerAnswer = async (player: PlayerInfo, index: number) => {\r\n    const newLikes = Object.assign([], hasLikedPlayers);\r\n    newLikes.push(index);\r\n    setHasLikedPlayers(newLikes);\r\n\r\n    await gameState.likeAnswer(player);\r\n  };\r\n\r\n  let displayComponent: Maybe<React.ReactNode> = null;\r\n\r\n  if (dealer.name === localPlayer.name) {\r\n    if (currentGame.someoneSkipped) {\r\n      displayComponent = (\r\n        <React.Fragment>\r\n          <Grid container direction=\"column\">\r\n            <Typography variant=\"h3\" align=\"center\" className={classes.title}>\r\n              Winner\r\n            </Typography>\r\n            <Typography align=\"center\">\r\n              {`You can award points to answers you liked`}\r\n            </Typography>\r\n            <Grid item container direction=\"column\">\r\n              {involvedPlayers.map((player: PlayerInfo, index: number) => {\r\n                const color = index ? \"blue\" : \"red\";\r\n                const hasLiked =\r\n                  hasLikedPlayers.findIndex((e) => e === index) > -1 ||\r\n                  (playersWeHaveLiked &&\r\n                    playersWeHaveLiked.findIndex((e) => e === player.name) >\r\n                      -1);\r\n                let buttonText = `👍 ${player.name}'s answer`;\r\n                if (hasLiked) {\r\n                  buttonText = `You already liked ${player.name}'s answer`;\r\n                }\r\n                if (player.name === localPlayer.name) {\r\n                  return null;\r\n                }\r\n                return (\r\n                  <Grid className={classes.choiceButton} item key={index}>\r\n                    <StyledButton\r\n                      color={color}\r\n                      fullWidth\r\n                      disabled={hasLiked}\r\n                      onClick={() => likePlayerAnswer(player, index)}\r\n                    >\r\n                      {buttonText}\r\n                    </StyledButton>\r\n                  </Grid>\r\n                );\r\n              })}\r\n            </Grid>\r\n            {currentGame.winnerChosen && timerSet ? (\r\n              <React.Fragment>\r\n                <Typography style={{ paddingTop: \"32px\" }} align=\"center\">\r\n                  {`Next Round in`}\r\n                </Typography>\r\n                <Typography\r\n                  style={{ paddingTop: \"64px\" }}\r\n                  variant={\"h1\"}\r\n                  align=\"center\"\r\n                >\r\n                  {`${timeLeft}`}\r\n                </Typography>\r\n              </React.Fragment>\r\n            ) : null}\r\n          </Grid>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      displayComponent = (\r\n        <React.Fragment>\r\n          <Grid container direction=\"column\">\r\n            <Typography variant=\"h3\" align=\"center\" className={classes.title}>\r\n              Winner\r\n            </Typography>\r\n            <React.Fragment>\r\n              <Typography align=\"center\">\r\n                Who gave the most authentic, truthful and potentially revealing\r\n                answer?\r\n              </Typography>\r\n\r\n              <Grid item container direction=\"column\">\r\n                {involvedPlayers.map((player: PlayerInfo, index: number) => {\r\n                  const color = index ? \"blue\" : \"red\";\r\n                  return (\r\n                    <Grid className={classes.choiceButton} item key={index}>\r\n                      <StyledButton\r\n                        color={color}\r\n                        fullWidth\r\n                        disabled={hasVotedForWinner}\r\n                        onClick={() => choseWinner(player)}\r\n                      >{`${player.name}'s Answer`}</StyledButton>\r\n                    </Grid>\r\n                  );\r\n                })}\r\n              </Grid>\r\n            </React.Fragment>\r\n            {!hasVotedForWinner ? null : (\r\n              <React.Fragment>\r\n                <Typography align=\"center\" style={{ paddingTop: \"32px\" }}>\r\n                  {`You can also award points to answers you liked`}\r\n                </Typography>\r\n                <Grid item container direction=\"column\">\r\n                  {involvedPlayers.map((player: PlayerInfo, index: number) => {\r\n                    const color = index ? \"blue\" : \"red\";\r\n                    const hasLiked =\r\n                      hasLikedPlayers.findIndex((e) => e === index) > -1 ||\r\n                      (playersWeHaveLiked &&\r\n                        playersWeHaveLiked.findIndex((e) => e === player.name) >\r\n                          -1);\r\n                    let buttonText = `👍 Like ${player.name}'s answer`;\r\n                    if (hasLiked) {\r\n                      buttonText = `You already liked ${player.name}'s answer`;\r\n                    }\r\n                    if (player.name === localPlayer.name) {\r\n                      return null;\r\n                    }\r\n                    return (\r\n                      <Grid className={classes.choiceButton} item key={index}>\r\n                        <StyledButton\r\n                          color={color}\r\n                          fullWidth\r\n                          disabled={hasLiked}\r\n                          onClick={() => likePlayerAnswer(player, index)}\r\n                        >\r\n                          {buttonText}\r\n                        </StyledButton>\r\n                      </Grid>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              </React.Fragment>\r\n            )}\r\n\r\n            {currentGame.winnerChosen && timerSet ? (\r\n              <React.Fragment>\r\n                <Typography style={{ paddingTop: \"32px\" }} align=\"center\">\r\n                  {`Next Round in`}\r\n                </Typography>\r\n                <Typography\r\n                  style={{ paddingTop: \"64px\" }}\r\n                  variant={\"h1\"}\r\n                  align=\"center\"\r\n                >\r\n                  {`${timeLeft}`}\r\n                </Typography>\r\n              </React.Fragment>\r\n            ) : null}\r\n          </Grid>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  } else {\r\n    displayComponent = (\r\n      <React.Fragment>\r\n        <Grid container direction=\"column\">\r\n          <Typography variant=\"h3\" align=\"center\" className={classes.title}>\r\n            Winner\r\n          </Typography>\r\n          <Typography align=\"center\">\r\n            {`${dealer.name} is deciding who the winner is...`}\r\n          </Typography>\r\n          <Typography align=\"center\">\r\n            {`But you can award points to answers you liked`}\r\n          </Typography>\r\n          <Grid item container direction=\"column\">\r\n            {involvedPlayers.map((player: PlayerInfo, index: number) => {\r\n              const color = index ? \"blue\" : \"red\";\r\n              const hasLiked =\r\n                hasLikedPlayers.findIndex((e) => e === index) > -1 ||\r\n                (playersWeHaveLiked &&\r\n                  playersWeHaveLiked.findIndex((e) => e === player.name) > -1);\r\n              let buttonText = `👍 Like ${player.name}'s answer`;\r\n              if (hasLiked) {\r\n                buttonText = `You already liked ${player.name}'s answer`;\r\n              }\r\n              if (player.name === localPlayer.name) {\r\n                return null;\r\n              }\r\n              return (\r\n                <Grid className={classes.choiceButton} item key={index}>\r\n                  <StyledButton\r\n                    color={color}\r\n                    fullWidth\r\n                    disabled={hasLiked}\r\n                    onClick={() => likePlayerAnswer(player, index)}\r\n                  >\r\n                    {buttonText}\r\n                  </StyledButton>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n          {currentGame.winnerChosen && timerSet ? (\r\n            <React.Fragment>\r\n              <Typography style={{ paddingTop: \"32px\" }} align=\"center\">\r\n                {`Next Round in`}\r\n              </Typography>\r\n              <Typography\r\n                style={{ paddingTop: \"64px\" }}\r\n                variant={\"h1\"}\r\n                align=\"center\"\r\n              >\r\n                {`${timeLeft}`}\r\n              </Typography>\r\n            </React.Fragment>\r\n          ) : null}\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{displayComponent}</React.Fragment>;\r\n};\r\n","E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\dealerChoosing.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\elements\\askingQuestions.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\usePlayerList.tsx",[],"E:\\truthordrink\\tod-react\\src\\pages\\HowToPlay.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useDuoGameState.tsx",["196"],"E:\\truthordrink\\tod-react\\src\\pages\\DuoGameRoom.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\duoMain.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\duoRound.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\duoLobby.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useGameSocket.tsx",[],"E:\\truthordrink\\tod-react\\src\\hooks\\useDuoGameStateHelpers.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\index.ts",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\askerChoosing.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\choosePoints.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\askingQuestions.tsx",[],"E:\\truthordrink\\tod-react\\src\\components\\game\\duo\\elements\\scores.tsx",["197","198"],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":113,"column":6,"nodeType":"205","endLine":113,"endColumn":8,"suggestions":"206"},{"ruleId":"203","severity":1,"message":"207","line":34,"column":6,"nodeType":"205","endLine":34,"endColumn":23,"suggestions":"208"},{"ruleId":"203","severity":1,"message":"209","line":26,"column":6,"nodeType":"205","endLine":26,"endColumn":8,"suggestions":"210"},{"ruleId":"203","severity":1,"message":"211","line":33,"column":6,"nodeType":"205","endLine":33,"endColumn":27,"suggestions":"212"},{"ruleId":"203","severity":1,"message":"213","line":52,"column":6,"nodeType":"205","endLine":52,"endColumn":8,"suggestions":"214"},{"ruleId":"203","severity":1,"message":"215","line":34,"column":9,"nodeType":"216","endLine":51,"endColumn":4},{"ruleId":"203","severity":1,"message":"217","line":32,"column":9,"nodeType":"216","endLine":49,"endColumn":4},{"ruleId":"203","severity":1,"message":"218","line":66,"column":6,"nodeType":"205","endLine":66,"endColumn":28,"suggestions":"219"},{"ruleId":"203","severity":1,"message":"204","line":103,"column":6,"nodeType":"205","endLine":103,"endColumn":8,"suggestions":"220"},{"ruleId":"221","severity":1,"message":"222","line":88,"column":19,"nodeType":"223","messageId":"224","endLine":88,"endColumn":27},{"ruleId":"221","severity":1,"message":"225","line":90,"column":19,"nodeType":"223","messageId":"224","endLine":90,"endColumn":27},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'currentGameState', 'gameSocket', and 'updateGameState'. Either include them or remove the dependency array.","ArrayExpression",["228"],"React Hook React.useEffect has a missing dependency: 'gameCodeInput.code.length'. Either include it or remove the dependency array.",["229"],"React Hook React.useMemo has missing dependencies: 'host' and 'path'. Either include them or remove the dependency array.",["230"],"React Hook React.useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["231"],"React Hook React.useEffect has missing dependencies: 'disconnectedCount', 'refreshSocket', and 'socket.connected'. Either include them or remove the dependency array. You can also do a functional update 'setDisconnectedCount(d => ...)' if you only need 'disconnectedCount' in the 'setDisconnectedCount' call.",["232"],"The 'playerInputComponent' JSX element makes the dependencies of useMemo Hook (at line 62) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'playerInputComponent' in its own useMemo() Hook.","VariableDeclarator","The 'gameCodeInputComponent' JSX element makes the dependencies of useMemo Hook (at line 57) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'gameCodeInputComponent' in its own useMemo() Hook.","React Hook React.useEffect has a missing dependency: 'intervalId'. Either include it or remove the dependency array.",["233"],["234"],"@typescript-eslint/no-unused-vars","'topLiked' is assigned a value but never used.","Identifier","unusedVar","'numLikes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"235","fix":"247"},"Update the dependencies array to be: [currentGameState, gameSocket, updateGameState]",{"range":"248","text":"249"},"Update the dependencies array to be: [gameCodeInput.code.length, playerDataInput]",{"range":"250","text":"251"},"Update the dependencies array to be: [host, path]",{"range":"252","text":"253"},"Update the dependencies array to be: [shouldRefreshSocket, socket]",{"range":"254","text":"255"},"Update the dependencies array to be: [disconnectedCount, refreshSocket, socket.connected]",{"range":"256","text":"257"},"Update the dependencies array to be: [currentGame.timerEnd, intervalId]",{"range":"258","text":"259"},{"range":"260","text":"249"},[3162,3164],"[currentGameState, gameSocket, updateGameState]",[1393,1410],"[gameCodeInput.code.length, playerDataInput]",[692,694],"[host, path]",[798,819],"[shouldRefreshSocket, socket]",[1238,1240],"[disconnectedCount, refreshSocket, socket.connected]",[1877,1899],"[currentGame.timerEnd, intervalId]",[2955,2957]]